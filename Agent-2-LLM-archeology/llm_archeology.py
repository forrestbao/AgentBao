{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import re\n",
    "import random\n",
    "from typing import List, Dict\n",
    "\n",
    "from tqdm.auto import tqdm\n",
    "\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "from google import genai\n",
    "from google.genai import types\n",
    "from google.genai.types import Tool, GenerateContentConfig, GoogleSearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Anthropic 4', 'Google Gemini-2.0-Flash-001', 'Google Gemini-2.0-Pro-Exp', 'OpenAI o3-mini-high', 'Vectara Mockingbird-2-Echo', 'Google Gemini-2.5-Pro-Exp-0325', 'Google Gemini-2.0-Flash-Lite-Preview', 'OpenAI GPT-4.5-Preview', 'Zhipu AI GLM-4-9B-Chat', 'Google Gemini-2.0-Flash-Exp']\n"
     ]
    }
   ],
   "source": [
    "def load_llm_names(file_path: str) -> List[str]:\n",
    "  \"\"\"Load and clean LLM names from the input file.\n",
    "  \n",
    "  The input file has lines with leading dashes and spaces like:\n",
    "  - Google Gemini-2.0-Flash-001\n",
    "  - OpenAI GPT-4o\n",
    "  - Anthropic 4\n",
    "  \"\"\"\n",
    "  with open(file_path, 'r', encoding='utf-8') as file:\n",
    "      lines = [line.strip() for line in file if line.strip()]\n",
    "  \n",
    "  # Remove leading dashes and clean up the names\n",
    "  cleaned_names = []\n",
    "  for line in lines:\n",
    "    # Remove leading dash, spaces, and any other bullet characters\n",
    "    cleaned = re.sub(r'^\\s*[-•–]\\s*', '', line.strip())\n",
    "    if cleaned:\n",
    "      cleaned_names.append(cleaned)\n",
    "  \n",
    "  return cleaned_names\n",
    "\n",
    "llm_names = load_llm_names(\"./llm_names.input\")\n",
    "print (llm_names[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "MODEL_NAME = \"gemini-2.5-flash\"\n",
    "def _query_model(llm_name: str) -> List[Dict[str, str]]:\n",
    "  prompt = (\n",
    "    \"For the following AI language model name, please: 1) get the correct model name, \"\n",
    "    \"2) identify the company or organization behind the model,\"\n",
    "    # \"3) extract the date code of the model from the model name (if applicable)\"\n",
    "    \"3) provide its first public release date in ISO format (YYYY-MM-DD). If the exact day is unknown, use YYYY-MM or just YYYY (the earliest accurate date).\\n\\n\"\n",
    "    \"For every model, search the web for its correct name and then extract the name. First, search on HuggingFace. If found, use the name on HuggingFace where every model's identifier is of the format: <company-name>/<model-name>. If the model cannot be found on HuggingFace, use its name in the API reference page on its company's website. If you cannot find the correct name, just use the name provided in the input. Do not make up the name.\\n\\n\"\n",
    "    \"If the model name given contains the company name, please remove the company name.\\n\\n\"\n",
    "    # \"If the model name given contains the date code, please remove the date code.\\n\\n\"\n",
    "    # \"A model name given may contain a date code. The date code can be in any format, including but not limited to: YYYY-MM-DD, YYYY-MM, MM-DD, MMDD. Use your best judgement to extract the date code.\\n\\n\"\n",
    "    # \"If a date code can be extracted, use it as the release date. Otherwise, you must find official web sources to verify release date. If you cannot find the release date, just use an empty string. Do not make up the release date.\\n\\n\"\n",
    "    # \"Return ONLY a valid JSON dictionary of four keys: \\\"model\\\", \\\"company\\\", \\\"release_date\\\", \\\"date_code\\\". Do NOT output thoughts or reasoning or any other text. \\n\\n\"\n",
    "    \"Return ONLY a valid JSON dictionary of three keys: \\\"model\\\", \\\"company\\\", \\\"release_date\\\". Do NOT output thoughts or reasoning or any other text. \\n\\n\"\n",
    "    \"Merge company name to its top-level parent company when applicable. For Qwen or anything Alibaba, the company name is Alibaba. For anything Amazon or AWS, the company name is Amazon. For anything Google, DeepMind, or Google Research, Google Brain, the company name is Google. \\n\\n\"\n",
    "    f\"Here is the LLM name for which you to find the correct name, company, and release date: {llm_name}\"\n",
    "  )\n",
    "\n",
    "  client = genai.Client()\n",
    "\n",
    "  google_search_tool = Tool(\n",
    "      google_search = GoogleSearch()\n",
    "  )\n",
    "\n",
    "  response = client.models.generate_content(\n",
    "    model=MODEL_NAME,\n",
    "    contents=prompt,\n",
    "    config= {\n",
    "      \"tools\": [google_search_tool],\n",
    "      \"response_modalities\": [\"TEXT\"],\n",
    "      \"thinking_config\": types.ThinkingConfig(thinking_budget=-1), \n",
    "      \"system_instruction\": \"You are an expert in AI history.\"\n",
    "    }\n",
    "  )\n",
    "  return response.text\n",
    "\n",
    "# _query_model(\"DBRX Instruct\") # This one failed my prompt \n",
    "\n",
    "# Randomly sample 10 LLM names\n",
    "# sampled_llm_names = random.sample(llm_names, 10)\n",
    "# for llm_name in sampled_llm_names:\n",
    "#     print(_query_model(llm_name))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _extract_json(text: str) -> List[Dict[str, str]]:\n",
    "  \"\"\"Check whether a string contains a JSON dictionary of three keys: \\\"model\\\", \\\"company\\\", \\\"release_date\\\" that is enclosed in triple backticks. If yes, convert the string to a dictionary. If not, return False. \n",
    "    \n",
    "  \"\"\"\n",
    "  # Inside triple backticks with json? Remove fences first\n",
    "  fenced = re.sub(r\"```[a-zA-Z0-9]*\", \"\", text).replace(\"```\", \"\")\n",
    "\n",
    "  try:\n",
    "    json.loads(fenced)\n",
    "    return json.loads(fenced)\n",
    "  except:\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_one_llm(llm_name: str) -> Dict[str, str]:\n",
    "  response = _query_model(llm_name)\n",
    "  if response:\n",
    "    json_result = _extract_json(response)\n",
    "    return json_result\n",
    "  else:\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _group_by_company(records: List[Dict[str, str]]) -> Dict[str, Dict[str, str]]:\n",
    "  grouped: Dict[str, Dict[str, str]] = {}\n",
    "  for rec in records:\n",
    "    company = rec[\"company\"].strip()\n",
    "    model = rec[\"model\"].strip()\n",
    "    release_date = rec[\"release_date\"].strip()\n",
    "    grouped.setdefault(company, []).append({\"model\": model, \"release_date\": release_date})\n",
    "\n",
    "  # sort the values of the grouped dictionary by model name alphabetically\n",
    "  for company in grouped:\n",
    "    grouped[company] = sorted(grouped[company], key=lambda x: x[\"model\"])\n",
    "  return grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8257a931ea6a4b999f8421694d5a32c7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/137 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Failed to get correct response from Gemini for Vectara Mockingbird-2-Echo\n",
      "Failed to get correct response from Gemini for OpenAI GPT-4.1-nano\n",
      "Failed to get correct response from Gemini for OpenAI GPT-4.1-mini\n",
      "Failed to get correct response from Gemini for AI21 Jamba-1.5-Mini\n",
      "Failed to get correct response from Gemini for Qwen2.5-Max\n",
      "Failed to get correct response from Gemini for Qwen3-8B\n",
      "Failed to get correct response from Gemini for Qwen3-8B\n",
      "Failed to get correct response from Gemini for Microsoft Phi-3-mini-128k-instruct\n",
      "Failed to get correct response from Gemini for 01-AI Yi-1.5-9B-Chat\n",
      "Failed to get correct response from Gemini for 01-AI Yi-1.5-9B-Chat\n",
      "Failed to get correct response from Gemini for Cohere Command-R\n",
      "Failed to get correct response from Gemini for Mistral-Pixtral\n",
      "Failed to get correct response from Gemini for databricks dbrx-instruct\n",
      "Failed to get correct response from Gemini for Google PaLM-2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[{'model': 'Claude 4', 'company': 'Anthropic', 'release_date': '2025-05-22'},\n",
       " {'model': 'gemini-2.0-flash-001',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-02-05'},\n",
       " {'model': 'Gemini 2.0 Pro Experimental',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-02-05'},\n",
       " {'model': 'o3-mini-high', 'company': 'OpenAI', 'release_date': '2025-01-31'},\n",
       " {'model': 'Mockingbird-2-Echo',\n",
       "  'company': 'Vectara',\n",
       "  'release_date': '2025-04-17'},\n",
       " {'model': 'gemini-2.5-pro-exp-03-25',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-03-25'},\n",
       " {'model': 'Gemini 2.0 Flash-Lite',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-12'},\n",
       " {'model': 'gpt-4.5-preview',\n",
       "  'company': 'OpenAI',\n",
       "  'release_date': '2025-02-27'},\n",
       " {'model': 'GLM-4-9B-Chat',\n",
       "  'company': 'Zhipu AI',\n",
       "  'release_date': '2024-06-05'},\n",
       " {'model': 'Gemini 2.0 Flash Experimental',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-12-11'},\n",
       " {'model': 'Gemini 2.5 Flash Preview',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-04-17'},\n",
       " {'model': 'o1-mini', 'company': 'OpenAI', 'release_date': '2024-09-12'},\n",
       " {'model': 'GPT-4o', 'company': 'OpenAI', 'release_date': '2024-05-13'},\n",
       " {'model': 'Nova Micro', 'company': 'Amazon', 'release_date': '2024-12-02'},\n",
       " {'model': 'GPT-4o mini', 'company': 'OpenAI', 'release_date': '2024-07-18'},\n",
       " {'model': 'GPT-4 Turbo', 'company': 'OpenAI', 'release_date': '2023-11'},\n",
       " {'model': 'Gemini 2.0 Flash Thinking Experimental',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-12-19'},\n",
       " {'model': 'Nova Lite', 'company': 'Amazon', 'release_date': '2024-12-03'},\n",
       " {'model': 'GPT-4', 'company': 'OpenAI', 'release_date': '2023-03-14'},\n",
       " {'model': 'Nova Pro v1', 'company': 'Amazon', 'release_date': '2024-12-03'},\n",
       " {'model': 'GPT-3.5 Turbo', 'company': 'OpenAI', 'release_date': '2023-03-21'},\n",
       " {'model': 'Grok-2', 'company': 'xAI', 'release_date': '2024-08-13'},\n",
       " {'model': 'GPT-4.1 nano', 'company': 'OpenAI', 'release_date': '2025-04-14'},\n",
       " {'model': 'GPT-4.1', 'company': 'OpenAI', 'release_date': '2025-04-14'},\n",
       " {'model': 'Grok 3 Beta', 'company': 'xAI', 'release_date': '2025-02-17'},\n",
       " {'model': 'GPT-4.1 mini', 'company': 'OpenAI', 'release_date': '2025-04-14'},\n",
       " {'model': 'Qwen3-14B', 'company': 'Alibaba', 'release_date': '2025-04-29'},\n",
       " {'model': 'Jamba-1.6-Large',\n",
       "  'company': 'AI21 Labs',\n",
       "  'release_date': '2025-03-06'},\n",
       " {'model': 'o1-Pro', 'company': 'OpenAI', 'release_date': '2025-03-21'},\n",
       " {'model': 'o1', 'company': 'OpenAI', 'release_date': '2024-09-12'},\n",
       " {'model': 'DeepSeek-V2.5',\n",
       "  'company': 'DeepSeek',\n",
       "  'release_date': '2024-09-05'},\n",
       " {'model': 'Orca-2-13b', 'company': 'Microsoft', 'release_date': '2023-11-20'},\n",
       " {'model': 'Phi-3.5-MoE-instruct',\n",
       "  'company': 'Microsoft',\n",
       "  'release_date': '2024-08-23'},\n",
       " {'model': 'neural-chat-7b-v3-3',\n",
       "  'company': 'Intel',\n",
       "  'release_date': '2023-10'},\n",
       " {'model': 'Qwen3-4B', 'company': 'Alibaba', 'release_date': '2025-04-29'},\n",
       " {'model': 'Gemma 3 12B Instruct',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-03-12'},\n",
       " {'model': 'Qwen2.5-7B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-09-19'},\n",
       " {'model': 'Qwen3-32B', 'company': 'Alibaba', 'release_date': '2025-06-15'},\n",
       " {'model': 'Jamba-1.5-Mini',\n",
       "  'company': 'AI21 Labs',\n",
       "  'release_date': '2024-08-22'},\n",
       " {'model': 'Grok-2-Vision', 'company': 'xAI', 'release_date': '2024-12-12'},\n",
       " {'model': 'Qwen2.5-Max', 'company': 'Alibaba', 'release_date': '2025-01-28'},\n",
       " {'model': 'gemma-3-27b-it',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-03-10'},\n",
       " {'model': 'Qwen2.5-32B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-09-19'},\n",
       " {'model': 'Arctic-Instruct',\n",
       "  'company': 'Snowflake',\n",
       "  'release_date': '2024-04-24'},\n",
       " {'model': 'Qwen3-8B', 'company': 'Alibaba', 'release_date': '2025-04-28'},\n",
       " {'model': 'Phi-3-mini-128k-instruct',\n",
       "  'company': 'Microsoft',\n",
       "  'release_date': '2024-04-23'},\n",
       " {'model': 'Mistral Small 3',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2025-01-30'},\n",
       " {'model': 'Grok-3-Mini-Beta', 'company': 'xAI', 'release_date': '2025-02-17'},\n",
       " {'model': 'o1-preview', 'company': 'OpenAI', 'release_date': '2024-09-12'},\n",
       " {'model': 'Gemini 1.5 Flash (002)',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-09-24'},\n",
       " {'model': 'Phi-4-mini-instruct',\n",
       "  'company': 'Microsoft',\n",
       "  'release_date': '2025-02-01'},\n",
       " {'model': 'Gemma-3-4B-Instruct',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-03-12'},\n",
       " {'model': 'Qwen3-0.6B', 'company': 'Alibaba', 'release_date': '2025-04-28'},\n",
       " {'model': 'Yi-1.5-34B-Chat',\n",
       "  'company': '01.AI',\n",
       "  'release_date': '2024-05-13'},\n",
       " {'model': 'Llama-3.1-405B-Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-07-23'},\n",
       " {'model': 'DeepSeek-V3', 'company': 'DeepSeek', 'release_date': '2024-12-25'},\n",
       " {'model': 'Phi-3-mini-4k-instruct',\n",
       "  'company': 'Microsoft',\n",
       "  'release_date': '2024-04-23'},\n",
       " {'model': 'Mistral Large 2',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2024-07-24'},\n",
       " {'model': 'Llama 3.3 70B Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-12-06'},\n",
       " {'model': 'Qwen2-VL-7B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-12-20'},\n",
       " {'model': 'Qwen2.5-14B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-09-19'},\n",
       " {'model': 'Qwen2.5-72B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-09-19'},\n",
       " {'model': 'Llama-3.2-90B-Vision-Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-09-25'},\n",
       " {'model': 'Qwen3-1.7B', 'company': 'Alibaba', 'release_date': '2025-04-28'},\n",
       " {'model': 'Claude 3.7 Sonnet',\n",
       "  'company': 'Anthropic',\n",
       "  'release_date': '2025-02-24'},\n",
       " {'model': 'Claude 3.7 Sonnet',\n",
       "  'company': 'Anthropic',\n",
       "  'release_date': '2025-02-24'},\n",
       " {'model': 'Command A', 'company': 'Cohere', 'release_date': '2025-03-13'},\n",
       " {'model': 'o4-mini', 'company': 'OpenAI', 'release_date': '2025-04-16'},\n",
       " {'model': 'Jamba-Mini-1.6',\n",
       "  'company': 'AI21 Labs',\n",
       "  'release_date': '2025-03-06'},\n",
       " {'model': 'Llama 4 Maverick',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2025-04-05'},\n",
       " {'model': 'Grok', 'company': 'xAI', 'release_date': '2023-11-03'},\n",
       " {'model': 'Claude 3.5 Sonnet',\n",
       "  'company': 'Anthropic',\n",
       "  'release_date': '2024-06-20'},\n",
       " {'model': 'Llama 4 Scout', 'company': 'Meta', 'release_date': '2025-04-05'},\n",
       " {'model': 'Qwen2-72B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-06-07'},\n",
       " {'model': 'Phi-4', 'company': 'Microsoft', 'release_date': '2024-12-12'},\n",
       " {'model': 'Mixtral-8x22B-Instruct-v0.1',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2024-04-17'},\n",
       " {'model': 'Claude 3.5 Haiku',\n",
       "  'company': 'Anthropic',\n",
       "  'release_date': '2024-10-22'},\n",
       " {'model': 'Yi-1.5-9B-Chat', 'company': '01-ai', 'release_date': '2024-05-13'},\n",
       " {'model': 'Command R', 'company': 'Cohere', 'release_date': '2024-03-11'},\n",
       " {'model': 'Llama-3.1-70B-Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-07-23'},\n",
       " {'model': 'Gemma-3-1B-Instruct',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2025-03-12'},\n",
       " {'model': 'Llama-3.1-8B-Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-07-23'},\n",
       " {'model': 'Command R+', 'company': 'Cohere', 'release_date': '2024-04-08'},\n",
       " {'model': 'Mistral-Small-3.1-24B-Instruct-2503',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2025-03-17'},\n",
       " {'model': 'Llama-3.2-11B-Vision-Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-09-25'},\n",
       " {'model': 'Llama-2-70b-chat-hf',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2023-07-18'},\n",
       " {'model': 'Granite-3.0-8B-Instruct',\n",
       "  'company': 'IBM',\n",
       "  'release_date': '2024-10-21'},\n",
       " {'model': 'Gemini-1.5-Pro-002',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-09-24'},\n",
       " {'model': 'Gemini 1.5 Flash',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-05-10'},\n",
       " {'model': 'Pixtral', 'company': 'Mistral AI', 'release_date': '2024-09-17'},\n",
       " {'model': 'phi-2', 'company': 'Microsoft', 'release_date': '2023-12-12'},\n",
       " {'model': 'o3', 'company': 'OpenAI', 'release_date': '2025-04-20'},\n",
       " {'model': 'gemma-2-2b-it', 'company': 'Google', 'release_date': '2024-07-31'},\n",
       " {'model': 'Qwen2.5-3B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-09-19'},\n",
       " {'model': 'Llama-3-8B-Chat', 'company': 'Meta', 'release_date': '2024-04-18'},\n",
       " {'model': 'Ministral-8B-Instruct-2410',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2024-09-17'},\n",
       " {'model': 'Gemini Pro', 'company': 'Google', 'release_date': '2023-12-06'},\n",
       " {'model': 'Yi-1.5-6B-Chat', 'company': '01.AI', 'release_date': '2024-05-13'},\n",
       " {'model': 'Llama-3.2-3B-Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-09-25'},\n",
       " {'model': 'DeepSeek-V3-0324',\n",
       "  'company': 'DeepSeek',\n",
       "  'release_date': '2025-03-24'},\n",
       " {'model': 'Ministral 3B',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2024-10-17'},\n",
       " {'model': 'DBRX Instruct',\n",
       "  'company': 'Databricks',\n",
       "  'release_date': '2024-03-27'},\n",
       " {'model': 'Qwen2-VL-2B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-08-30'},\n",
       " {'model': 'Aya Expanse 32B',\n",
       "  'company': 'Cohere',\n",
       "  'release_date': '2024-10-24'},\n",
       " {'model': 'Granite-3.1-8B-Instruct',\n",
       "  'company': 'IBM',\n",
       "  'release_date': '2024-12-18'},\n",
       " {'model': 'Mistral Small 2',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2024-09'},\n",
       " {'model': 'Granite-3.2-8B-Instruct',\n",
       "  'company': 'IBM',\n",
       "  'release_date': '2025-02-26'},\n",
       " {'model': 'Granite-3.0-2B-Instruct',\n",
       "  'company': 'IBM',\n",
       "  'release_date': '2024-10-21'},\n",
       " {'model': 'Mistral-7B-Instruct-v0.3',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2024-05-22'},\n",
       " {'model': 'Gemini-1.5-Pro', 'company': 'Google', 'release_date': '2024-02'},\n",
       " {'model': 'Claude 3 Opus',\n",
       "  'company': 'Anthropic',\n",
       "  'release_date': '2024-02-29'},\n",
       " {'model': 'Gemma-2-9B-it', 'company': 'Google', 'release_date': '2024-06-27'},\n",
       " {'model': 'Llama 2 13B Chat',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2023-07-18'},\n",
       " {'model': 'OLMo-2-1124-13B-Instruct',\n",
       "  'company': 'AllenAI',\n",
       "  'release_date': '2024-11'},\n",
       " {'model': 'OLMo-2-1124-7B-Instruct',\n",
       "  'company': 'Allen Institute for AI',\n",
       "  'release_date': '2024-11-26'},\n",
       " {'model': 'Mistral-Nemo-Instruct-2407',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2024-07-18'},\n",
       " {'model': 'Llama-2-7b-chat-hf',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2023-07-18'},\n",
       " {'model': 'WizardLM-2-8x22B',\n",
       "  'company': 'Microsoft',\n",
       "  'release_date': '2024-04-15'},\n",
       " {'model': 'Aya Expanse 8B',\n",
       "  'company': 'Cohere',\n",
       "  'release_date': '2024-10-24'},\n",
       " {'model': 'Titan Text Express',\n",
       "  'company': 'Amazon',\n",
       "  'release_date': '2023-11-29'},\n",
       " {'model': 'PaLM 2', 'company': 'Google', 'release_date': '2023-05-10'},\n",
       " {'model': 'R1', 'company': 'DeepSeek', 'release_date': '2025-01-20'},\n",
       " {'model': 'gemma-7b-it', 'company': 'Google', 'release_date': '2024-02-21'},\n",
       " {'model': 'granite-3.1-2b-instruct',\n",
       "  'company': 'IBM',\n",
       "  'release_date': '2024-12-18'},\n",
       " {'model': 'Qwen2.5-1.5B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-09-19'},\n",
       " {'model': 'QwQ-32B-Preview', 'company': 'Alibaba', 'release_date': '2024-11'},\n",
       " {'model': 'Claude 3 Sonnet',\n",
       "  'company': 'Anthropic',\n",
       "  'release_date': '2024-03-04'},\n",
       " {'model': 'granite-3.2-2b-instruct',\n",
       "  'company': 'IBM',\n",
       "  'release_date': '2025-02-26'},\n",
       " {'model': 'gemma-1.1-7b-it',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-04-05'},\n",
       " {'model': 'Claude 2', 'company': 'Anthropic', 'release_date': '2023-07-11'},\n",
       " {'model': 'flan-t5-large', 'company': 'Google', 'release_date': '2022-10-19'},\n",
       " {'model': 'Mixtral-8x7B-Instruct-v0.1',\n",
       "  'company': 'Mistral AI',\n",
       "  'release_date': '2023-12-11'},\n",
       " {'model': 'Llama-3.2-1B-Instruct',\n",
       "  'company': 'Meta',\n",
       "  'release_date': '2024-09-25'},\n",
       " {'model': 'OpenELM-3B-Instruct',\n",
       "  'company': 'Apple',\n",
       "  'release_date': '2024-04'},\n",
       " {'model': 'Qwen2.5-0.5B-Instruct',\n",
       "  'company': 'Alibaba',\n",
       "  'release_date': '2024-09-19'},\n",
       " {'model': 'Gemma-1.1-2B-it',\n",
       "  'company': 'Google',\n",
       "  'release_date': '2024-04-05'},\n",
       " {'model': 'falcon-7b-instruct',\n",
       "  'company': 'Technology Innovation Institute',\n",
       "  'release_date': '2023-06-20'}]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def loop_through_llm_names(llm_names: List[str], dump_file: str) -> List[Dict[str, str]]:\n",
    "  \"\"\"\n",
    "  Loop through the LLM names and process them.\n",
    "  \"\"\"\n",
    "  results = []\n",
    "  for llm_name in tqdm(llm_names):\n",
    "    found = False\n",
    "    count = 0\n",
    "    while not found and count < 3:\n",
    "      llm_dict = process_one_llm(llm_name)\n",
    "      if llm_dict:\n",
    "        found = True\n",
    "      else:\n",
    "        print(f\"Failed to get correct response from Gemini for {llm_name}\")\n",
    "        count += 1\n",
    "\n",
    "    if not found:\n",
    "      # use old name\n",
    "      llm_dict = {\"model\": llm_name, \"company\": \"\", \"release_date\": \"\"}\n",
    "\n",
    "    results.append(llm_dict)\n",
    "\n",
    "    grouped = _group_by_company(results)\n",
    "    with open(dump_file, \"w\") as f:\n",
    "      json.dump(grouped, f, indent=2)\n",
    "\n",
    "  return results\n",
    "\n",
    "sampled_llm_names = random.sample(llm_names, 20)\n",
    "\n",
    "# loop_through_llm_names(sampled_llm_names, \"llm_names_cleaned.json\")\n",
    "\n",
    "loop_through_llm_names(llm_names, \"llm_names_cleaned.json\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
